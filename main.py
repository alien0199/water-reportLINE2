import os
import json
import requests
import re
from bs4 import BeautifulSoup
from PIL import Image, ImageDraw, ImageFont
from dotenv import load_dotenv
from requests_html import HTMLSession

TALING_LEVEL = 13.0

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def get_chao_phraya_dam_data():
    url = 'https://tiwrm.hii.or.th/DATA/REPORT/php/chart/chaopraya/small/chaopraya.php'
    try:
        res = requests.get(url, timeout=30)
        res.raise_for_status()
        match = re.search(r'var json_data = (\[.*\]);', res.text)
        if not match: return "-"
        json_string = match.group(1)
        data = json.loads(json_string)
        dam_discharge = data[0]['itc_water']['C13']['storage']
        return str(int(float(dam_discharge.replace(",", "")))) if dam_discharge else "-"
    except Exception:
        return "-"

def get_inburi_bridge_data():
    url = "https://singburi.thaiwater.net/wl"
    try:
        session = HTMLSession()
        r = session.get(url, timeout=30)
        r.html.render(sleep=10, timeout=60)
        soup = BeautifulSoup(r.html.html, "html.parser")
        for row in soup.find_all("tr"):
            th = row.find("th", {"scope": "row"})
            if th and "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ" in th.get_text(strip=True):
                tds = row.find_all("td")
                if len(tds) >= 2:
                    return float(tds[1].get_text(strip=True))
        return "-"
    except Exception:
        return "-"

def get_weather_status():
    api_key = os.getenv("OPENWEATHER_API_KEY")
    if not api_key: return "N/A"
    lat, lon = "14.9", "100.4"
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}&lang=th&units=metric"
    try:
        res = requests.get(url, timeout=30)
        data = res.json()
        return f"{data['weather'][0]['description'].capitalize()}"
    except Exception:
        return "N/A"

# --- ‚ú®‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Caption ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
def generate_facebook_caption(water_level, discharge, weather) -> str:
    caption_lines = []
    hashtags = []
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    try:
        level = float(water_level)
    except (ValueError, TypeError):
        level = 0.0

    try:
        dis_val = int(discharge)
    except (ValueError, TypeError):
        dis_val = 0

    if level == 0.0:
         caption_lines.append("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
    elif level >= 12.0:
        caption_lines.append(f"‚ö†Ô∏è ‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å! ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà {level:.2f} ‡∏°. ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
        hashtags.append("#‡∏ô‡πâ‡∏≥‡∏ß‡∏¥‡∏Å‡∏§‡∏ï")
    elif level >= 11.5:
        caption_lines.append(f"üî∂ ‡∏ô‡πâ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏•‡∏¥‡πà‡∏á! ‡∏£‡∏∞‡∏î‡∏±‡∏ö {level:.2f} ‡∏°. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î")
        hashtags.append("#‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á")
    else:
        caption_lines.append(f"‚úÖ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {level:.2f} ‡∏°. ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡∏µ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
        hashtags.append("#‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡∏µ")

    if dis_val >= 2000:
        caption_lines.append(f"‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏ñ‡∏∂‡∏á {dis_val} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥")
        hashtags.append("#‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡πÅ‡∏£‡∏á")
    elif dis_val >= 1000:
        caption_lines.append(f"‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà {dis_val} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥")
        hashtags.append("#‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏°‡∏≤‡∏Å")

    if "‡∏ù‡∏ô" in weather:
        hashtags.append("#‡∏ù‡∏ô‡∏ï‡∏Å")
    elif "‡πÄ‡∏°‡∏Ü" in weather:
        hashtags.append("#‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏°")

    hashtags.append("#‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏≠‡∏î‡∏°‡∏±‡πâ‡∏¢")

    return "\n".join(caption_lines) + "\n\n" + " ".join(hashtags)

# ‚ú® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà
def create_report_image(dam_discharge, water_level, weather_status):
    TEXT_COLOR = "#2c3e50"
    IMAGE_WIDTH = 1080
    Y_START = 340
    
    try:
        image = Image.open("background.jpg").convert("RGB")
    except FileNotFoundError:
        image = Image.new("RGB", (IMAGE_WIDTH, 1080), "white")

    draw = ImageDraw.Draw(image)

    try:
        font_bold_l = ImageFont.truetype("Sarabun-Bold.ttf", 60)
        font_regular_l = ImageFont.truetype("Sarabun-Regular.ttf", 48)
        font_regular_m = ImageFont.truetype("Sarabun-Regular.ttf", 42) # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    except FileNotFoundError:
        font_bold_l = font_regular_l = font_regular_m = ImageFont.load_default()

    level_text = f"{water_level:.2f} ‡∏°." if isinstance(water_level, float) else "N/A"
    discharge_text = f"{dam_discharge} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
    weather_text = weather_status
    
    diff = TALING_LEVEL - water_level if isinstance(water_level, float) else 99
    if diff <= 1.5:
        sit_text, sit_detail = "‡∏ß‡∏¥‡∏Å‡∏§‡∏ï", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≥‡∏•‡πâ‡∏ô‡∏ï‡∏•‡∏¥‡πà‡∏á"
    elif diff <= 2.5:
        sit_text, sit_detail = "‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏•‡∏¥‡πà‡∏á"
    else:
        sit_text, sit_detail = "‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏ô‡πâ‡∏≥‡∏¢‡∏±‡∏á‡∏´‡πà‡∏≤‡∏á‡∏ï‡∏•‡∏¥‡πà‡∏á ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡πâ‡∏≤"

    y = Y_START
    # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥
    draw.text((IMAGE_WIDTH / 2, y), f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ ‡∏ì ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: {level_text}", font=font_bold_l, fill=TEXT_COLOR, anchor="ms")
    y += 100
    # ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥
    draw.text((IMAGE_WIDTH / 2, y), f"‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏Ø: {discharge_text}", font=font_regular_l, fill=TEXT_COLOR, anchor="ms")
    y += 100
    # ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    draw.text((IMAGE_WIDTH / 2, y), f"‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {weather_text}", font=font_regular_l, fill=TEXT_COLOR, anchor="ms")
    y += 110
    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    draw.text((IMAGE_WIDTH / 2, y), f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå: {sit_text}", font=font_bold_l, fill=TEXT_COLOR, anchor="ms")
    y += 80
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å regular_m ‡πÄ‡∏õ‡πá‡∏ô font_regular_m
    draw.text((IMAGE_WIDTH / 2, y), sit_detail, font=font_regular_m, fill=TEXT_COLOR, anchor="ms")
    
    image.save("final_report.jpg", quality=95)

    dynamic_caption = generate_facebook_caption(water_level, dam_discharge, weather_status)
    with open("status.txt", "w", encoding="utf-8") as f:
        f.write(dynamic_caption)

if __name__ == "__main__":
    load_dotenv()
    dam = get_chao_phraya_dam_data()
    level = get_inburi_bridge_data()
    weather = get_weather_status()
    create_report_image(dam, level, weather)
